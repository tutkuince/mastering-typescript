# Type Narrowing

- Typeof Guards
    + typeof Type Guards involve simply doing a type check before working with a value.
    + Since unions allow multiple types for a value, we can first check what came through before working with it.

- Truthiness Guards
    + Truthiness Type Guards involve checking a value for being truthy or falsy before working with it.
    + This is helpful in avoiding errors when values might be null or undefined.

- Equality Narrowing
    + equality Type Guards involve comparing types to each other before doing certain operations with values.
    + By checking two values against one another, we can be sure they're both the sames before working with them in a type-specific way.

- in Operator Narrowing
    + Javascript's in operator helps check if a certain property exists in an object.
    + This means we can use it to check if a value exists in an object, according to its type alias or aliases, before working with it.

- instanceof Narrowing
    + instanceof is a Javascript operator that allows us to check if one thing is an instance of another
    + This can help us narrow types when working with things like classes.

- Type Predicates
    + TypeScript allows us to write custom functions that can narrow the type of value. These functions have a very special return type called a type predicate.
    + A predicate takes the form parameterName is Type

- Discriminated Unions
    + A common pattern in TypeScript involves creating a literal property that is common across multiple types.
    + We can then narrow the type using that literal property